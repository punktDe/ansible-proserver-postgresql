- name: Create root user
  when: ansible_system == 'Linux'
  become_user: postgres
  postgresql_user:
    login_user: postgres
    db: postgres
    name: root
    role_attr_flags: SUPERUSER

- name: Create users
  postgresql_user:
    login_user: root
    db: postgres
    name: "{{ item.username }}"
    role_attr_flags: "{{ none if item.role_attributes|default(none) == none else item.role_attributes.values()|join(',') }}"
    password: "{{ item.password|default(none) }}"
  loop_control:
    label: "{{ item.username }}"
  with_items: "{{ postgresql.users.values()|list }}"

- name: Assign privs
  loop: "{{ postgresql.privileges.values() | list }}"
  community.postgresql.postgresql_privs:
    objs: "{{ item.objs | default(omit) }}"
    schema: "{{ item.schema | default(omit) }}"
    database: "{{ item.database }}"
    state: present
    privs: "{{ item.privs | join(',') }}"
    type: "{{ item.type | default('table') }}"
    roles: "{{ item.username }}"
    grant_option: true

- name: Add users to pg_hba.conf
  loop: "{{ postgresql.users.values() | list | subelements('hosts', skip_missing=True) }}"
  vars:
    hba_databases: >-
      {{
        postgresql.privileges.values() |
        selectattr('username', 'equalto', item[0].username) |
        map(attribute='database') |
        unique |
        list |
        join(',')
      }}
  when: "hba_databases is not undefined and hba_databases | length > 0"
  community.postgresql.postgresql_pg_hba:
    dest: "{{ postgresql.prefix.config }}/pg_hba.conf"
    contype: host
    users: "{{ item[0].username }}"
    source: "{{ item[1] }}"
    databases: "{{ hba_databases }}"
    method: password
